name: Create Release (Windows)

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 vX.Y.Z 格式的标签

# 添加必要的权限声明
permissions:
  contents: write  # 允许创建和修改发布

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取所有历史记录

      - name: Package data directory
        run: |
          # 打包 data 目录
          if (Test-Path -Path "data") {
              Compress-Archive -Path data\* -DestinationPath data.zip
              echo "ZIP_PACKAGE=data.zip" >> $env:GITHUB_ENV
              Write-Host "Successfully created data.zip"
          } else {
              Write-Error "Directory not found (data)"
              exit 1
          }
        shell: powershell

      - name: Get current tag
        id: current_tag
        run: |
          $currentTag = $env:GITHUB_REF -replace 'refs/tags/', ''
          echo "current_tag=$currentTag" >> $env:GITHUB_OUTPUT
          Write-Host "Current tag: $currentTag"
        shell: powershell

      - name: Find previous version tag
        id: previous_tag
        run: |
          $currentTag = "${{ steps.current_tag.outputs.current_tag }}"
          $previousTag = $null
          
          # 提取版本号（移除 v 前缀）
          if ($currentTag -match 'v(\d+\.\d+\.\d+)') {
              $currentVersion = [version]$matches[1]
              
              # 获取所有符合格式的标签并排序
              $allTags = git tag --list "v*.*.*" `
                  | Where-Object { $_ -ne $currentTag } `
                  | ForEach-Object { 
                      if ($_ -match 'v(\d+\.\d+\.\d+)') {
                          [PSCustomObject]@{
                              Tag = $_
                              Version = [version]$matches[1]
                          }
                      }
                  } `
                  | Sort-Object -Property Version -Descending
              
              # 查找最新的前一个版本
              if ($allTags.Count -gt 0) {
                  $previousTag = $allTags[0].Tag
              }
          }
          
          if ($previousTag) {
              Write-Host "Found previous tag: $previousTag"
          } else {
              Write-Host "No previous tags found"
          }
          
          echo "previous_tag=$previousTag" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Generate release notes
        id: release_notes
        run: |
          $currentTag = "${{ steps.current_tag.outputs.current_tag }}"
          $previousTag = "${{ steps.previous_tag.outputs.previous_tag }}"
          
          # 生成提交日志，包含 Markdown 格式和时间信息
          try {
              # 写入 Markdown 标题
              "# 发布详情`n" | Out-File -FilePath release_notes.txt -Encoding utf8

              # 添加变更记录标题
              "`n## 变更记录`n`n" | Out-File -FilePath release_notes.txt -Encoding utf8 -Append
              
              # 获取提交记录，包含时间、信息和哈希
              if (-not $previousTag) {
                  # 没有上一个标签，获取从初始提交到当前标签的所有提交
                  Write-Host "Generating notes from initial commit to $currentTag"
                  $notes = git log "$currentTag" --pretty=format:"- %s (%h) - %cd" --date=format:"%Y-%m-%d %H:%M"
              } else {
                  # 获取两个标签之间的提交
                  Write-Host "Generating notes from $previousTag to $currentTag"
                  $notes = git log "$previousTag..$currentTag" --pretty=format:"- %s (%h) - %cd" --date=format:"%Y-%m-%d %H:%M"
              }
              
              # 处理空日志情况
              if (-not $notes) {
                  $notes = "- 无明显变更"
              }
              
              # 将提交记录追加到文件
              $notes | Out-File -FilePath release_notes.txt -Encoding utf8 -Append
              echo "notes_file=release_notes.txt" >> $env:GITHUB_ENV
              
              # 输出前 10 行
              Write-Host "Generated release notes:"
              Get-Content release_notes.txt | Select-Object -First 10
          } catch {
              Write-Error "Failed to generate release notes: $_"
              exit 1
          }
        shell: powershell

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.current_tag.outputs.current_tag }}
          name: Release ${{ steps.current_tag.outputs.current_tag }}
          body_path: ${{ env.notes_file }}
          files: ${{ env.ZIP_PACKAGE }}
          overwrite: true  # 允许覆盖已存在的发布（可选）
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}